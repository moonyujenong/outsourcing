{
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\outsourcing\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\outsourcing\",\"filename\":\"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\outsourcing\\\\gulpfile.babel.js\",\"targets\":{\"android\":\"95.0.0\",\"chrome\":\"95.0.0\",\"edge\":\"95.0.0\",\"firefox\":\"94.0.0\",\"ie\":\"10.0.0\",\"ios\":\"15.0.0\",\"opera\":\"81.0.0\",\"safari\":\"15.1.0\",\"samsung\":\"14.0.0\"},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\outsourcing\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.5": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Users\\USER\\Documents\\GitHub\\outsourcing\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\USER\\Documents\\GitHub\\outsourcing",
      "filename": "C:\\Users\\USER\\Documents\\GitHub\\outsourcing\\gulpfile.babel.js",
      "targets": {
        "android": "95.0.0",
        "chrome": "95.0.0",
        "edge": "95.0.0",
        "firefox": "94.0.0",
        "ie": "10.0.0",
        "ios": "15.0.0",
        "opera": "81.0.0",
        "safari": "15.1.0",
        "samsung": "14.0.0"
      },
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "C:\\Users\\USER\\Documents\\GitHub\\outsourcing",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\USER\\Documents\\GitHub\\outsourcing\\gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\USER\\Documents\\GitHub\\outsourcing\\gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\USER\\Documents\\GitHub\\outsourcing\\",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "const gulp = require('gulp');\n\nconst $ = require('gulp-load-plugins')();\n\nconst Path = require('path');\n\nlet generateSourceMaps = process.env.NODE_ENV !== 'production';\n\nif (process.env.SOURCEMAPS === 'true' || process.env.SOURCEMAPS === '1') {\n  generateSourceMaps = true;\n} // scss 사용 할 때\n\n\nconst taskSass = function () {\n  return gulp.src(['./**/assets/src/scss/**/*.scss']).pipe($.if(generateSourceMaps, $.sourcemaps.init())).pipe($.plumber()).pipe($.sass({\n    // includePaths: sassPaths,\n    outputStyle: generateSourceMaps ? 'expanded' : 'compressed'\n  }).on('error', $.sass.logError)).pipe($.autoprefixer()).pipe($.rename(function (filepath) {\n    filepath.dirname = Path.join(filepath.dirname, '../../css');\n  })).pipe($.if(generateSourceMaps, $.sourcemaps.write('.'))).pipe(gulp.dest('.'));\n};\n\ntaskSass.displayName = 'sass'; // const taskPosthtml = function () {\n//   const options = {\n//     root: '../markup/src'\n//   }\n//\n//   const plugins = [\n//     require('posthtml-extend')(options),\n//     require('posthtml-include')(options)\n//   ]\n//\n//   return gulp.src(['../markup/src/**/*.html', '!**/_*.html'])\n//     .pipe($.posthtml(plugins))\n//     .pipe(gulp.dest('../markup'))\n// }\n// taskPosthtml.displayName = 'posthtml'\n\nconst taskWatch = function () {\n  gulp.watch(['./**/assets/src/scss/**/**/*.scss'], gulp.series(taskSass)); // gulp.watch(['./**/assets/src/scss/**/*.scss'], gulp.series(themeTaskSass))\n  // gulp.watch(['Components/Themes/assets/src/js/*.js'], gulp.series(taskScript))\n  // gulp.watch(['../markup/src/**/*.html'], gulp.series(taskPosthtml))\n}; // gulp.task('default', gulp.series(taskSass, taskScript)) => taskScript 사용 안해서 제외\n\n\ngulp.task('default', gulp.series(taskSass));\ngulp.task('build', gulp.series(taskSass));\ngulp.task('watch', taskWatch); // gulp.task(taskScript)\n\ngulp.task(taskSass); // gulp.task(taskPosthtml)\n// gulp.task('lint', gulp.series(taskLintStyle))\n// gulp.task(taskLintStyle)\n// gulp.task(taskFixStyle)\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1bHBmaWxlLmJhYmVsLmpzIl0sIm5hbWVzIjpbImd1bHAiLCJyZXF1aXJlIiwiJCIsIlBhdGgiLCJnZW5lcmF0ZVNvdXJjZU1hcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJTT1VSQ0VNQVBTIiwidGFza1Nhc3MiLCJzcmMiLCJwaXBlIiwiaWYiLCJzb3VyY2VtYXBzIiwiaW5pdCIsInBsdW1iZXIiLCJzYXNzIiwib3V0cHV0U3R5bGUiLCJvbiIsImxvZ0Vycm9yIiwiYXV0b3ByZWZpeGVyIiwicmVuYW1lIiwiZmlsZXBhdGgiLCJkaXJuYW1lIiwiam9pbiIsIndyaXRlIiwiZGVzdCIsImRpc3BsYXlOYW1lIiwidGFza1dhdGNoIiwid2F0Y2giLCJzZXJpZXMiLCJ0YXNrIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLENBQUMsR0FBR0QsT0FBTyxDQUFDLG1CQUFELENBQVAsRUFBVjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQUlHLGtCQUFrQixHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUFsRDs7QUFFQSxJQUFJRixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsVUFBWixLQUEyQixNQUEzQixJQUFxQ0gsT0FBTyxDQUFDQyxHQUFSLENBQVlFLFVBQVosS0FBMkIsR0FBcEUsRUFBeUU7QUFDdkVKLEVBQUFBLGtCQUFrQixHQUFHLElBQXJCO0FBQ0QsQyxDQUVEOzs7QUFDQSxNQUFNSyxRQUFRLEdBQUcsWUFBWTtBQUMzQixTQUFPVCxJQUFJLENBQUNVLEdBQUwsQ0FBUyxDQUFDLGdDQUFELENBQVQsRUFDSkMsSUFESSxDQUNDVCxDQUFDLENBQUNVLEVBQUYsQ0FBS1Isa0JBQUwsRUFBeUJGLENBQUMsQ0FBQ1csVUFBRixDQUFhQyxJQUFiLEVBQXpCLENBREQsRUFFSkgsSUFGSSxDQUVDVCxDQUFDLENBQUNhLE9BQUYsRUFGRCxFQUdKSixJQUhJLENBR0NULENBQUMsQ0FBQ2MsSUFBRixDQUFPO0FBQ1g7QUFDQUMsSUFBQUEsV0FBVyxFQUFHYixrQkFBRCxHQUF1QixVQUF2QixHQUFvQztBQUZ0QyxHQUFQLEVBR0hjLEVBSEcsQ0FHQSxPQUhBLEVBR1NoQixDQUFDLENBQUNjLElBQUYsQ0FBT0csUUFIaEIsQ0FIRCxFQU9KUixJQVBJLENBT0NULENBQUMsQ0FBQ2tCLFlBQUYsRUFQRCxFQVFKVCxJQVJJLENBUUNULENBQUMsQ0FBQ21CLE1BQUYsQ0FBUyxVQUFVQyxRQUFWLEVBQW9CO0FBQ2pDQSxJQUFBQSxRQUFRLENBQUNDLE9BQVQsR0FBbUJwQixJQUFJLENBQUNxQixJQUFMLENBQVVGLFFBQVEsQ0FBQ0MsT0FBbkIsRUFBNEIsV0FBNUIsQ0FBbkI7QUFDRCxHQUZLLENBUkQsRUFXSlosSUFYSSxDQVdDVCxDQUFDLENBQUNVLEVBQUYsQ0FBS1Isa0JBQUwsRUFBeUJGLENBQUMsQ0FBQ1csVUFBRixDQUFhWSxLQUFiLENBQW1CLEdBQW5CLENBQXpCLENBWEQsRUFZSmQsSUFaSSxDQVlDWCxJQUFJLENBQUMwQixJQUFMLENBQVUsR0FBVixDQVpELENBQVA7QUFhRCxDQWREOztBQWVBakIsUUFBUSxDQUFDa0IsV0FBVCxHQUF1QixNQUF2QixDLENBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1DLFNBQVMsR0FBRyxZQUFZO0FBQzVCNUIsRUFBQUEsSUFBSSxDQUFDNkIsS0FBTCxDQUFXLENBQUMsbUNBQUQsQ0FBWCxFQUFrRDdCLElBQUksQ0FBQzhCLE1BQUwsQ0FBWXJCLFFBQVosQ0FBbEQsRUFENEIsQ0FFNUI7QUFDQTtBQUNBO0FBQ0QsQ0FMRCxDLENBT0E7OztBQUNBVCxJQUFJLENBQUMrQixJQUFMLENBQVUsU0FBVixFQUFxQi9CLElBQUksQ0FBQzhCLE1BQUwsQ0FBWXJCLFFBQVosQ0FBckI7QUFDQVQsSUFBSSxDQUFDK0IsSUFBTCxDQUFVLE9BQVYsRUFBbUIvQixJQUFJLENBQUM4QixNQUFMLENBQVlyQixRQUFaLENBQW5CO0FBQ0FULElBQUksQ0FBQytCLElBQUwsQ0FBVSxPQUFWLEVBQW1CSCxTQUFuQixFLENBRUE7O0FBQ0E1QixJQUFJLENBQUMrQixJQUFMLENBQVV0QixRQUFWLEUsQ0FFQTtBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXFVTRVJcXERvY3VtZW50c1xcR2l0SHViXFxvdXRzb3VyY2luZ1xcIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ3VscCA9IHJlcXVpcmUoJ2d1bHAnKVxyXG5jb25zdCAkID0gcmVxdWlyZSgnZ3VscC1sb2FkLXBsdWdpbnMnKSgpXHJcbmNvbnN0IFBhdGggPSByZXF1aXJlKCdwYXRoJylcclxubGV0IGdlbmVyYXRlU291cmNlTWFwcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcclxuXHJcbmlmIChwcm9jZXNzLmVudi5TT1VSQ0VNQVBTID09PSAndHJ1ZScgfHwgcHJvY2Vzcy5lbnYuU09VUkNFTUFQUyA9PT0gJzEnKSB7XHJcbiAgZ2VuZXJhdGVTb3VyY2VNYXBzID0gdHJ1ZVxyXG59XHJcblxyXG4vLyBzY3NzIOyCrOyaqSDtlaAg65WMXHJcbmNvbnN0IHRhc2tTYXNzID0gZnVuY3Rpb24gKCkgeyBcclxuICByZXR1cm4gZ3VscC5zcmMoWycuLyoqL2Fzc2V0cy9zcmMvc2Nzcy8qKi8qLnNjc3MnXSlcclxuICAgIC5waXBlKCQuaWYoZ2VuZXJhdGVTb3VyY2VNYXBzLCAkLnNvdXJjZW1hcHMuaW5pdCgpKSlcclxuICAgIC5waXBlKCQucGx1bWJlcigpKVxyXG4gICAgLnBpcGUoJC5zYXNzKHtcclxuICAgICAgLy8gaW5jbHVkZVBhdGhzOiBzYXNzUGF0aHMsXHJcbiAgICAgIG91dHB1dFN0eWxlOiAoZ2VuZXJhdGVTb3VyY2VNYXBzKSA/ICdleHBhbmRlZCcgOiAnY29tcHJlc3NlZCdcclxuICAgIH0pLm9uKCdlcnJvcicsICQuc2Fzcy5sb2dFcnJvcikpXHJcbiAgICAucGlwZSgkLmF1dG9wcmVmaXhlcigpKVxyXG4gICAgLnBpcGUoJC5yZW5hbWUoZnVuY3Rpb24gKGZpbGVwYXRoKSB7XHJcbiAgICAgIGZpbGVwYXRoLmRpcm5hbWUgPSBQYXRoLmpvaW4oZmlsZXBhdGguZGlybmFtZSwgJy4uLy4uL2NzcycpXHJcbiAgICB9KSlcclxuICAgIC5waXBlKCQuaWYoZ2VuZXJhdGVTb3VyY2VNYXBzLCAkLnNvdXJjZW1hcHMud3JpdGUoJy4nKSkpXHJcbiAgICAucGlwZShndWxwLmRlc3QoJy4nKSlcclxufVxyXG50YXNrU2Fzcy5kaXNwbGF5TmFtZSA9ICdzYXNzJ1xyXG5cclxuXHJcblxyXG4vLyBjb25zdCB0YXNrUG9zdGh0bWwgPSBmdW5jdGlvbiAoKSB7XHJcbi8vICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuLy8gICAgIHJvb3Q6ICcuLi9tYXJrdXAvc3JjJ1xyXG4vLyAgIH1cclxuLy9cclxuLy8gICBjb25zdCBwbHVnaW5zID0gW1xyXG4vLyAgICAgcmVxdWlyZSgncG9zdGh0bWwtZXh0ZW5kJykob3B0aW9ucyksXHJcbi8vICAgICByZXF1aXJlKCdwb3N0aHRtbC1pbmNsdWRlJykob3B0aW9ucylcclxuLy8gICBdXHJcbi8vXHJcbi8vICAgcmV0dXJuIGd1bHAuc3JjKFsnLi4vbWFya3VwL3NyYy8qKi8qLmh0bWwnLCAnISoqL18qLmh0bWwnXSlcclxuLy8gICAgIC5waXBlKCQucG9zdGh0bWwocGx1Z2lucykpXHJcbi8vICAgICAucGlwZShndWxwLmRlc3QoJy4uL21hcmt1cCcpKVxyXG4vLyB9XHJcbi8vIHRhc2tQb3N0aHRtbC5kaXNwbGF5TmFtZSA9ICdwb3N0aHRtbCdcclxuXHJcbmNvbnN0IHRhc2tXYXRjaCA9IGZ1bmN0aW9uICgpIHtcclxuICBndWxwLndhdGNoKFsnLi8qKi9hc3NldHMvc3JjL3Njc3MvKiovKiovKi5zY3NzJ10sIGd1bHAuc2VyaWVzKHRhc2tTYXNzKSlcclxuICAvLyBndWxwLndhdGNoKFsnLi8qKi9hc3NldHMvc3JjL3Njc3MvKiovKi5zY3NzJ10sIGd1bHAuc2VyaWVzKHRoZW1lVGFza1Nhc3MpKVxyXG4gIC8vIGd1bHAud2F0Y2goWydDb21wb25lbnRzL1RoZW1lcy9hc3NldHMvc3JjL2pzLyouanMnXSwgZ3VscC5zZXJpZXModGFza1NjcmlwdCkpXHJcbiAgLy8gZ3VscC53YXRjaChbJy4uL21hcmt1cC9zcmMvKiovKi5odG1sJ10sIGd1bHAuc2VyaWVzKHRhc2tQb3N0aHRtbCkpXHJcbn1cclxuXHJcbi8vIGd1bHAudGFzaygnZGVmYXVsdCcsIGd1bHAuc2VyaWVzKHRhc2tTYXNzLCB0YXNrU2NyaXB0KSkgPT4gdGFza1NjcmlwdCDsgqzsmqkg7JWI7ZW07IScIOygnOyZuFxyXG5ndWxwLnRhc2soJ2RlZmF1bHQnLCBndWxwLnNlcmllcyh0YXNrU2FzcykpXHJcbmd1bHAudGFzaygnYnVpbGQnLCBndWxwLnNlcmllcyh0YXNrU2FzcykpXHJcbmd1bHAudGFzaygnd2F0Y2gnLCB0YXNrV2F0Y2gpXHJcblxyXG4vLyBndWxwLnRhc2sodGFza1NjcmlwdClcclxuZ3VscC50YXNrKHRhc2tTYXNzKVxyXG4gXHJcbi8vIGd1bHAudGFzayh0YXNrUG9zdGh0bWwpXHJcblxyXG4vLyBndWxwLnRhc2soJ2xpbnQnLCBndWxwLnNlcmllcyh0YXNrTGludFN0eWxlKSlcclxuLy8gZ3VscC50YXNrKHRhc2tMaW50U3R5bGUpXHJcbi8vIGd1bHAudGFzayh0YXNrRml4U3R5bGUpXHJcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "gulp",
        "require",
        "$",
        "Path",
        "generateSourceMaps",
        "process",
        "env",
        "NODE_ENV",
        "SOURCEMAPS",
        "taskSass",
        "src",
        "pipe",
        "if",
        "sourcemaps",
        "init",
        "plumber",
        "sass",
        "outputStyle",
        "on",
        "logError",
        "autoprefixer",
        "rename",
        "filepath",
        "dirname",
        "join",
        "write",
        "dest",
        "displayName",
        "taskWatch",
        "watch",
        "series",
        "task"
      ],
      "mappings": "AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,mBAAD,CAAP,EAAV;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAIG,kBAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAlD;;AAEA,IAAIF,OAAO,CAACC,GAAR,CAAYE,UAAZ,KAA2B,MAA3B,IAAqCH,OAAO,CAACC,GAAR,CAAYE,UAAZ,KAA2B,GAApE,EAAyE;AACvEJ,EAAAA,kBAAkB,GAAG,IAArB;AACD,C,CAED;;;AACA,MAAMK,QAAQ,GAAG,YAAY;AAC3B,SAAOT,IAAI,CAACU,GAAL,CAAS,CAAC,gCAAD,CAAT,EACJC,IADI,CACCT,CAAC,CAACU,EAAF,CAAKR,kBAAL,EAAyBF,CAAC,CAACW,UAAF,CAAaC,IAAb,EAAzB,CADD,EAEJH,IAFI,CAECT,CAAC,CAACa,OAAF,EAFD,EAGJJ,IAHI,CAGCT,CAAC,CAACc,IAAF,CAAO;AACX;AACAC,IAAAA,WAAW,EAAGb,kBAAD,GAAuB,UAAvB,GAAoC;AAFtC,GAAP,EAGHc,EAHG,CAGA,OAHA,EAGShB,CAAC,CAACc,IAAF,CAAOG,QAHhB,CAHD,EAOJR,IAPI,CAOCT,CAAC,CAACkB,YAAF,EAPD,EAQJT,IARI,CAQCT,CAAC,CAACmB,MAAF,CAAS,UAAUC,QAAV,EAAoB;AACjCA,IAAAA,QAAQ,CAACC,OAAT,GAAmBpB,IAAI,CAACqB,IAAL,CAAUF,QAAQ,CAACC,OAAnB,EAA4B,WAA5B,CAAnB;AACD,GAFK,CARD,EAWJZ,IAXI,CAWCT,CAAC,CAACU,EAAF,CAAKR,kBAAL,EAAyBF,CAAC,CAACW,UAAF,CAAaY,KAAb,CAAmB,GAAnB,CAAzB,CAXD,EAYJd,IAZI,CAYCX,IAAI,CAAC0B,IAAL,CAAU,GAAV,CAZD,CAAP;AAaD,CAdD;;AAeAjB,QAAQ,CAACkB,WAAT,GAAuB,MAAvB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,YAAY;AAC5B5B,EAAAA,IAAI,CAAC6B,KAAL,CAAW,CAAC,mCAAD,CAAX,EAAkD7B,IAAI,CAAC8B,MAAL,CAAYrB,QAAZ,CAAlD,EAD4B,CAE5B;AACA;AACA;AACD,CALD,C,CAOA;;;AACAT,IAAI,CAAC+B,IAAL,CAAU,SAAV,EAAqB/B,IAAI,CAAC8B,MAAL,CAAYrB,QAAZ,CAArB;AACAT,IAAI,CAAC+B,IAAL,CAAU,OAAV,EAAmB/B,IAAI,CAAC8B,MAAL,CAAYrB,QAAZ,CAAnB;AACAT,IAAI,CAAC+B,IAAL,CAAU,OAAV,EAAmBH,SAAnB,E,CAEA;;AACA5B,IAAI,CAAC+B,IAAL,CAAUtB,QAAV,E,CAEA;AAEA;AACA;AACA",
      "sourceRoot": "C:\\Users\\USER\\Documents\\GitHub\\outsourcing\\",
      "sourcesContent": [
        "const gulp = require('gulp')\r\nconst $ = require('gulp-load-plugins')()\r\nconst Path = require('path')\r\nlet generateSourceMaps = process.env.NODE_ENV !== 'production'\r\n\r\nif (process.env.SOURCEMAPS === 'true' || process.env.SOURCEMAPS === '1') {\r\n  generateSourceMaps = true\r\n}\r\n\r\n// scss 사용 할 때\r\nconst taskSass = function () { \r\n  return gulp.src(['./**/assets/src/scss/**/*.scss'])\r\n    .pipe($.if(generateSourceMaps, $.sourcemaps.init()))\r\n    .pipe($.plumber())\r\n    .pipe($.sass({\r\n      // includePaths: sassPaths,\r\n      outputStyle: (generateSourceMaps) ? 'expanded' : 'compressed'\r\n    }).on('error', $.sass.logError))\r\n    .pipe($.autoprefixer())\r\n    .pipe($.rename(function (filepath) {\r\n      filepath.dirname = Path.join(filepath.dirname, '../../css')\r\n    }))\r\n    .pipe($.if(generateSourceMaps, $.sourcemaps.write('.')))\r\n    .pipe(gulp.dest('.'))\r\n}\r\ntaskSass.displayName = 'sass'\r\n\r\n\r\n\r\n// const taskPosthtml = function () {\r\n//   const options = {\r\n//     root: '../markup/src'\r\n//   }\r\n//\r\n//   const plugins = [\r\n//     require('posthtml-extend')(options),\r\n//     require('posthtml-include')(options)\r\n//   ]\r\n//\r\n//   return gulp.src(['../markup/src/**/*.html', '!**/_*.html'])\r\n//     .pipe($.posthtml(plugins))\r\n//     .pipe(gulp.dest('../markup'))\r\n// }\r\n// taskPosthtml.displayName = 'posthtml'\r\n\r\nconst taskWatch = function () {\r\n  gulp.watch(['./**/assets/src/scss/**/**/*.scss'], gulp.series(taskSass))\r\n  // gulp.watch(['./**/assets/src/scss/**/*.scss'], gulp.series(themeTaskSass))\r\n  // gulp.watch(['Components/Themes/assets/src/js/*.js'], gulp.series(taskScript))\r\n  // gulp.watch(['../markup/src/**/*.html'], gulp.series(taskPosthtml))\r\n}\r\n\r\n// gulp.task('default', gulp.series(taskSass, taskScript)) => taskScript 사용 안해서 제외\r\ngulp.task('default', gulp.series(taskSass))\r\ngulp.task('build', gulp.series(taskSass))\r\ngulp.task('watch', taskWatch)\r\n\r\n// gulp.task(taskScript)\r\ngulp.task(taskSass)\r\n \r\n// gulp.task(taskPosthtml)\r\n\r\n// gulp.task('lint', gulp.series(taskLintStyle))\r\n// gulp.task(taskLintStyle)\r\n// gulp.task(taskFixStyle)\r\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1640239963801
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/moon/Desktop/outsourcing/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/moon/Desktop/outsourcing\",\"filename\":\"/Users/moon/Desktop/outsourcing/gulpfile.babel.js\",\"targets\":{\"android\":\"95.0.0\",\"chrome\":\"95.0.0\",\"edge\":\"95.0.0\",\"firefox\":\"94.0.0\",\"ie\":\"10.0.0\",\"ios\":\"15.0.0\",\"opera\":\"81.0.0\",\"safari\":\"15.1.0\",\"samsung\":\"14.0.0\"},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/moon/Desktop/outsourcing\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.5": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/moon/Desktop/outsourcing/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/moon/Desktop/outsourcing",
      "filename": "/Users/moon/Desktop/outsourcing/gulpfile.babel.js",
      "targets": {
        "android": "95.0.0",
        "chrome": "95.0.0",
        "edge": "95.0.0",
        "firefox": "94.0.0",
        "ie": "10.0.0",
        "ios": "15.0.0",
        "opera": "81.0.0",
        "safari": "15.1.0",
        "samsung": "14.0.0"
      },
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/moon/Desktop/outsourcing",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/moon/Desktop/outsourcing/gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/moon/Desktop/outsourcing/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/moon/Desktop/outsourcing/",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "const gulp = require('gulp');\n\nconst $ = require('gulp-load-plugins')();\n\nconst Path = require('path');\n\nlet generateSourceMaps = process.env.NODE_ENV !== 'production';\n\nif (process.env.SOURCEMAPS === 'true' || process.env.SOURCEMAPS === '1') {\n  generateSourceMaps = true;\n} // scss 사용 할 때\n\n\nconst taskSass = function () {\n  return gulp.src(['./**/assets/src/scss/**/*.scss']).pipe($.if(generateSourceMaps, $.sourcemaps.init())).pipe($.plumber()).pipe($.sass({\n    // includePaths: sassPaths,\n    outputStyle: generateSourceMaps ? 'expanded' : 'compressed'\n  }).on('error', $.sass.logError)).pipe($.autoprefixer()).pipe($.rename(function (filepath) {\n    filepath.dirname = Path.join(filepath.dirname, '../../css');\n  })).pipe($.if(generateSourceMaps, $.sourcemaps.write('.'))).pipe(gulp.dest('.'));\n};\n\ntaskSass.displayName = 'sass'; // const taskPosthtml = function () {\n//   const options = {\n//     root: '../markup/src'\n//   }\n//\n//   const plugins = [\n//     require('posthtml-extend')(options),\n//     require('posthtml-include')(options)\n//   ]\n//\n//   return gulp.src(['../markup/src/**/*.html', '!**/_*.html'])\n//     .pipe($.posthtml(plugins))\n//     .pipe(gulp.dest('../markup'))\n// }\n// taskPosthtml.displayName = 'posthtml'\n\nconst taskWatch = function () {\n  gulp.watch(['./**/assets/src/scss/**/**/*.scss'], gulp.series(taskSass)); // gulp.watch(['./**/assets/src/scss/**/*.scss'], gulp.series(themeTaskSass))\n  // gulp.watch(['Components/Themes/assets/src/js/*.js'], gulp.series(taskScript))\n  // gulp.watch(['../markup/src/**/*.html'], gulp.series(taskPosthtml))\n}; // gulp.task('default', gulp.series(taskSass, taskScript)) => taskScript 사용 안해서 제외\n\n\ngulp.task('default', gulp.series(taskSass));\ngulp.task('build', gulp.series(taskSass));\ngulp.task('watch', taskWatch); // gulp.task(taskScript)\n\ngulp.task(taskSass); // gulp.task(taskPosthtml)\n// gulp.task('lint', gulp.series(taskLintStyle))\n// gulp.task(taskLintStyle)\n// gulp.task(taskFixStyle)\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1bHBmaWxlLmJhYmVsLmpzIl0sIm5hbWVzIjpbImd1bHAiLCJyZXF1aXJlIiwiJCIsIlBhdGgiLCJnZW5lcmF0ZVNvdXJjZU1hcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJTT1VSQ0VNQVBTIiwidGFza1Nhc3MiLCJzcmMiLCJwaXBlIiwiaWYiLCJzb3VyY2VtYXBzIiwiaW5pdCIsInBsdW1iZXIiLCJzYXNzIiwib3V0cHV0U3R5bGUiLCJvbiIsImxvZ0Vycm9yIiwiYXV0b3ByZWZpeGVyIiwicmVuYW1lIiwiZmlsZXBhdGgiLCJkaXJuYW1lIiwiam9pbiIsIndyaXRlIiwiZGVzdCIsImRpc3BsYXlOYW1lIiwidGFza1dhdGNoIiwid2F0Y2giLCJzZXJpZXMiLCJ0YXNrIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLENBQUMsR0FBR0QsT0FBTyxDQUFDLG1CQUFELENBQVAsRUFBVjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQUlHLGtCQUFrQixHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUFsRDs7QUFFQSxJQUFJRixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsVUFBWixLQUEyQixNQUEzQixJQUFxQ0gsT0FBTyxDQUFDQyxHQUFSLENBQVlFLFVBQVosS0FBMkIsR0FBcEUsRUFBeUU7QUFDdkVKLEVBQUFBLGtCQUFrQixHQUFHLElBQXJCO0FBQ0QsQyxDQUVEOzs7QUFDQSxNQUFNSyxRQUFRLEdBQUcsWUFBWTtBQUMzQixTQUFPVCxJQUFJLENBQUNVLEdBQUwsQ0FBUyxDQUFDLGdDQUFELENBQVQsRUFDSkMsSUFESSxDQUNDVCxDQUFDLENBQUNVLEVBQUYsQ0FBS1Isa0JBQUwsRUFBeUJGLENBQUMsQ0FBQ1csVUFBRixDQUFhQyxJQUFiLEVBQXpCLENBREQsRUFFSkgsSUFGSSxDQUVDVCxDQUFDLENBQUNhLE9BQUYsRUFGRCxFQUdKSixJQUhJLENBR0NULENBQUMsQ0FBQ2MsSUFBRixDQUFPO0FBQ1g7QUFDQUMsSUFBQUEsV0FBVyxFQUFHYixrQkFBRCxHQUF1QixVQUF2QixHQUFvQztBQUZ0QyxHQUFQLEVBR0hjLEVBSEcsQ0FHQSxPQUhBLEVBR1NoQixDQUFDLENBQUNjLElBQUYsQ0FBT0csUUFIaEIsQ0FIRCxFQU9KUixJQVBJLENBT0NULENBQUMsQ0FBQ2tCLFlBQUYsRUFQRCxFQVFKVCxJQVJJLENBUUNULENBQUMsQ0FBQ21CLE1BQUYsQ0FBUyxVQUFVQyxRQUFWLEVBQW9CO0FBQ2pDQSxJQUFBQSxRQUFRLENBQUNDLE9BQVQsR0FBbUJwQixJQUFJLENBQUNxQixJQUFMLENBQVVGLFFBQVEsQ0FBQ0MsT0FBbkIsRUFBNEIsV0FBNUIsQ0FBbkI7QUFDRCxHQUZLLENBUkQsRUFXSlosSUFYSSxDQVdDVCxDQUFDLENBQUNVLEVBQUYsQ0FBS1Isa0JBQUwsRUFBeUJGLENBQUMsQ0FBQ1csVUFBRixDQUFhWSxLQUFiLENBQW1CLEdBQW5CLENBQXpCLENBWEQsRUFZSmQsSUFaSSxDQVlDWCxJQUFJLENBQUMwQixJQUFMLENBQVUsR0FBVixDQVpELENBQVA7QUFhRCxDQWREOztBQWVBakIsUUFBUSxDQUFDa0IsV0FBVCxHQUF1QixNQUF2QixDLENBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1DLFNBQVMsR0FBRyxZQUFZO0FBQzVCNUIsRUFBQUEsSUFBSSxDQUFDNkIsS0FBTCxDQUFXLENBQUMsbUNBQUQsQ0FBWCxFQUFrRDdCLElBQUksQ0FBQzhCLE1BQUwsQ0FBWXJCLFFBQVosQ0FBbEQsRUFENEIsQ0FFNUI7QUFDQTtBQUNBO0FBQ0QsQ0FMRCxDLENBT0E7OztBQUNBVCxJQUFJLENBQUMrQixJQUFMLENBQVUsU0FBVixFQUFxQi9CLElBQUksQ0FBQzhCLE1BQUwsQ0FBWXJCLFFBQVosQ0FBckI7QUFDQVQsSUFBSSxDQUFDK0IsSUFBTCxDQUFVLE9BQVYsRUFBbUIvQixJQUFJLENBQUM4QixNQUFMLENBQVlyQixRQUFaLENBQW5CO0FBQ0FULElBQUksQ0FBQytCLElBQUwsQ0FBVSxPQUFWLEVBQW1CSCxTQUFuQixFLENBRUE7O0FBQ0E1QixJQUFJLENBQUMrQixJQUFMLENBQVV0QixRQUFWLEUsQ0FFQTtBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbW9vbi9EZXNrdG9wL291dHNvdXJjaW5nLyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGd1bHAgPSByZXF1aXJlKCdndWxwJylcbmNvbnN0ICQgPSByZXF1aXJlKCdndWxwLWxvYWQtcGx1Z2lucycpKClcbmNvbnN0IFBhdGggPSByZXF1aXJlKCdwYXRoJylcbmxldCBnZW5lcmF0ZVNvdXJjZU1hcHMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG5cbmlmIChwcm9jZXNzLmVudi5TT1VSQ0VNQVBTID09PSAndHJ1ZScgfHwgcHJvY2Vzcy5lbnYuU09VUkNFTUFQUyA9PT0gJzEnKSB7XG4gIGdlbmVyYXRlU291cmNlTWFwcyA9IHRydWVcbn1cblxuLy8gc2NzcyDsgqzsmqkg7ZWgIOuVjFxuY29uc3QgdGFza1Nhc3MgPSBmdW5jdGlvbiAoKSB7IFxuICByZXR1cm4gZ3VscC5zcmMoWycuLyoqL2Fzc2V0cy9zcmMvc2Nzcy8qKi8qLnNjc3MnXSlcbiAgICAucGlwZSgkLmlmKGdlbmVyYXRlU291cmNlTWFwcywgJC5zb3VyY2VtYXBzLmluaXQoKSkpXG4gICAgLnBpcGUoJC5wbHVtYmVyKCkpXG4gICAgLnBpcGUoJC5zYXNzKHtcbiAgICAgIC8vIGluY2x1ZGVQYXRoczogc2Fzc1BhdGhzLFxuICAgICAgb3V0cHV0U3R5bGU6IChnZW5lcmF0ZVNvdXJjZU1hcHMpID8gJ2V4cGFuZGVkJyA6ICdjb21wcmVzc2VkJ1xuICAgIH0pLm9uKCdlcnJvcicsICQuc2Fzcy5sb2dFcnJvcikpXG4gICAgLnBpcGUoJC5hdXRvcHJlZml4ZXIoKSlcbiAgICAucGlwZSgkLnJlbmFtZShmdW5jdGlvbiAoZmlsZXBhdGgpIHtcbiAgICAgIGZpbGVwYXRoLmRpcm5hbWUgPSBQYXRoLmpvaW4oZmlsZXBhdGguZGlybmFtZSwgJy4uLy4uL2NzcycpXG4gICAgfSkpXG4gICAgLnBpcGUoJC5pZihnZW5lcmF0ZVNvdXJjZU1hcHMsICQuc291cmNlbWFwcy53cml0ZSgnLicpKSlcbiAgICAucGlwZShndWxwLmRlc3QoJy4nKSlcbn1cbnRhc2tTYXNzLmRpc3BsYXlOYW1lID0gJ3Nhc3MnXG5cblxuXG4vLyBjb25zdCB0YXNrUG9zdGh0bWwgPSBmdW5jdGlvbiAoKSB7XG4vLyAgIGNvbnN0IG9wdGlvbnMgPSB7XG4vLyAgICAgcm9vdDogJy4uL21hcmt1cC9zcmMnXG4vLyAgIH1cbi8vXG4vLyAgIGNvbnN0IHBsdWdpbnMgPSBbXG4vLyAgICAgcmVxdWlyZSgncG9zdGh0bWwtZXh0ZW5kJykob3B0aW9ucyksXG4vLyAgICAgcmVxdWlyZSgncG9zdGh0bWwtaW5jbHVkZScpKG9wdGlvbnMpXG4vLyAgIF1cbi8vXG4vLyAgIHJldHVybiBndWxwLnNyYyhbJy4uL21hcmt1cC9zcmMvKiovKi5odG1sJywgJyEqKi9fKi5odG1sJ10pXG4vLyAgICAgLnBpcGUoJC5wb3N0aHRtbChwbHVnaW5zKSlcbi8vICAgICAucGlwZShndWxwLmRlc3QoJy4uL21hcmt1cCcpKVxuLy8gfVxuLy8gdGFza1Bvc3RodG1sLmRpc3BsYXlOYW1lID0gJ3Bvc3RodG1sJ1xuXG5jb25zdCB0YXNrV2F0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gIGd1bHAud2F0Y2goWycuLyoqL2Fzc2V0cy9zcmMvc2Nzcy8qKi8qKi8qLnNjc3MnXSwgZ3VscC5zZXJpZXModGFza1Nhc3MpKVxuICAvLyBndWxwLndhdGNoKFsnLi8qKi9hc3NldHMvc3JjL3Njc3MvKiovKi5zY3NzJ10sIGd1bHAuc2VyaWVzKHRoZW1lVGFza1Nhc3MpKVxuICAvLyBndWxwLndhdGNoKFsnQ29tcG9uZW50cy9UaGVtZXMvYXNzZXRzL3NyYy9qcy8qLmpzJ10sIGd1bHAuc2VyaWVzKHRhc2tTY3JpcHQpKVxuICAvLyBndWxwLndhdGNoKFsnLi4vbWFya3VwL3NyYy8qKi8qLmh0bWwnXSwgZ3VscC5zZXJpZXModGFza1Bvc3RodG1sKSlcbn1cblxuLy8gZ3VscC50YXNrKCdkZWZhdWx0JywgZ3VscC5zZXJpZXModGFza1Nhc3MsIHRhc2tTY3JpcHQpKSA9PiB0YXNrU2NyaXB0IOyCrOyaqSDslYjtlbTshJwg7KCc7Jm4XG5ndWxwLnRhc2soJ2RlZmF1bHQnLCBndWxwLnNlcmllcyh0YXNrU2FzcykpXG5ndWxwLnRhc2soJ2J1aWxkJywgZ3VscC5zZXJpZXModGFza1Nhc3MpKVxuZ3VscC50YXNrKCd3YXRjaCcsIHRhc2tXYXRjaClcblxuLy8gZ3VscC50YXNrKHRhc2tTY3JpcHQpXG5ndWxwLnRhc2sodGFza1Nhc3MpXG4gXG4vLyBndWxwLnRhc2sodGFza1Bvc3RodG1sKVxuXG4vLyBndWxwLnRhc2soJ2xpbnQnLCBndWxwLnNlcmllcyh0YXNrTGludFN0eWxlKSlcbi8vIGd1bHAudGFzayh0YXNrTGludFN0eWxlKVxuLy8gZ3VscC50YXNrKHRhc2tGaXhTdHlsZSlcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "gulp",
        "require",
        "$",
        "Path",
        "generateSourceMaps",
        "process",
        "env",
        "NODE_ENV",
        "SOURCEMAPS",
        "taskSass",
        "src",
        "pipe",
        "if",
        "sourcemaps",
        "init",
        "plumber",
        "sass",
        "outputStyle",
        "on",
        "logError",
        "autoprefixer",
        "rename",
        "filepath",
        "dirname",
        "join",
        "write",
        "dest",
        "displayName",
        "taskWatch",
        "watch",
        "series",
        "task"
      ],
      "mappings": "AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,mBAAD,CAAP,EAAV;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAIG,kBAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAlD;;AAEA,IAAIF,OAAO,CAACC,GAAR,CAAYE,UAAZ,KAA2B,MAA3B,IAAqCH,OAAO,CAACC,GAAR,CAAYE,UAAZ,KAA2B,GAApE,EAAyE;AACvEJ,EAAAA,kBAAkB,GAAG,IAArB;AACD,C,CAED;;;AACA,MAAMK,QAAQ,GAAG,YAAY;AAC3B,SAAOT,IAAI,CAACU,GAAL,CAAS,CAAC,gCAAD,CAAT,EACJC,IADI,CACCT,CAAC,CAACU,EAAF,CAAKR,kBAAL,EAAyBF,CAAC,CAACW,UAAF,CAAaC,IAAb,EAAzB,CADD,EAEJH,IAFI,CAECT,CAAC,CAACa,OAAF,EAFD,EAGJJ,IAHI,CAGCT,CAAC,CAACc,IAAF,CAAO;AACX;AACAC,IAAAA,WAAW,EAAGb,kBAAD,GAAuB,UAAvB,GAAoC;AAFtC,GAAP,EAGHc,EAHG,CAGA,OAHA,EAGShB,CAAC,CAACc,IAAF,CAAOG,QAHhB,CAHD,EAOJR,IAPI,CAOCT,CAAC,CAACkB,YAAF,EAPD,EAQJT,IARI,CAQCT,CAAC,CAACmB,MAAF,CAAS,UAAUC,QAAV,EAAoB;AACjCA,IAAAA,QAAQ,CAACC,OAAT,GAAmBpB,IAAI,CAACqB,IAAL,CAAUF,QAAQ,CAACC,OAAnB,EAA4B,WAA5B,CAAnB;AACD,GAFK,CARD,EAWJZ,IAXI,CAWCT,CAAC,CAACU,EAAF,CAAKR,kBAAL,EAAyBF,CAAC,CAACW,UAAF,CAAaY,KAAb,CAAmB,GAAnB,CAAzB,CAXD,EAYJd,IAZI,CAYCX,IAAI,CAAC0B,IAAL,CAAU,GAAV,CAZD,CAAP;AAaD,CAdD;;AAeAjB,QAAQ,CAACkB,WAAT,GAAuB,MAAvB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,YAAY;AAC5B5B,EAAAA,IAAI,CAAC6B,KAAL,CAAW,CAAC,mCAAD,CAAX,EAAkD7B,IAAI,CAAC8B,MAAL,CAAYrB,QAAZ,CAAlD,EAD4B,CAE5B;AACA;AACA;AACD,CALD,C,CAOA;;;AACAT,IAAI,CAAC+B,IAAL,CAAU,SAAV,EAAqB/B,IAAI,CAAC8B,MAAL,CAAYrB,QAAZ,CAArB;AACAT,IAAI,CAAC+B,IAAL,CAAU,OAAV,EAAmB/B,IAAI,CAAC8B,MAAL,CAAYrB,QAAZ,CAAnB;AACAT,IAAI,CAAC+B,IAAL,CAAU,OAAV,EAAmBH,SAAnB,E,CAEA;;AACA5B,IAAI,CAAC+B,IAAL,CAAUtB,QAAV,E,CAEA;AAEA;AACA;AACA",
      "sourceRoot": "/Users/moon/Desktop/outsourcing/",
      "sourcesContent": [
        "const gulp = require('gulp')\nconst $ = require('gulp-load-plugins')()\nconst Path = require('path')\nlet generateSourceMaps = process.env.NODE_ENV !== 'production'\n\nif (process.env.SOURCEMAPS === 'true' || process.env.SOURCEMAPS === '1') {\n  generateSourceMaps = true\n}\n\n// scss 사용 할 때\nconst taskSass = function () { \n  return gulp.src(['./**/assets/src/scss/**/*.scss'])\n    .pipe($.if(generateSourceMaps, $.sourcemaps.init()))\n    .pipe($.plumber())\n    .pipe($.sass({\n      // includePaths: sassPaths,\n      outputStyle: (generateSourceMaps) ? 'expanded' : 'compressed'\n    }).on('error', $.sass.logError))\n    .pipe($.autoprefixer())\n    .pipe($.rename(function (filepath) {\n      filepath.dirname = Path.join(filepath.dirname, '../../css')\n    }))\n    .pipe($.if(generateSourceMaps, $.sourcemaps.write('.')))\n    .pipe(gulp.dest('.'))\n}\ntaskSass.displayName = 'sass'\n\n\n\n// const taskPosthtml = function () {\n//   const options = {\n//     root: '../markup/src'\n//   }\n//\n//   const plugins = [\n//     require('posthtml-extend')(options),\n//     require('posthtml-include')(options)\n//   ]\n//\n//   return gulp.src(['../markup/src/**/*.html', '!**/_*.html'])\n//     .pipe($.posthtml(plugins))\n//     .pipe(gulp.dest('../markup'))\n// }\n// taskPosthtml.displayName = 'posthtml'\n\nconst taskWatch = function () {\n  gulp.watch(['./**/assets/src/scss/**/**/*.scss'], gulp.series(taskSass))\n  // gulp.watch(['./**/assets/src/scss/**/*.scss'], gulp.series(themeTaskSass))\n  // gulp.watch(['Components/Themes/assets/src/js/*.js'], gulp.series(taskScript))\n  // gulp.watch(['../markup/src/**/*.html'], gulp.series(taskPosthtml))\n}\n\n// gulp.task('default', gulp.series(taskSass, taskScript)) => taskScript 사용 안해서 제외\ngulp.task('default', gulp.series(taskSass))\ngulp.task('build', gulp.series(taskSass))\ngulp.task('watch', taskWatch)\n\n// gulp.task(taskScript)\ngulp.task(taskSass)\n \n// gulp.task(taskPosthtml)\n\n// gulp.task('lint', gulp.series(taskLintStyle))\n// gulp.task(taskLintStyle)\n// gulp.task(taskFixStyle)\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1649569071763
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/HaL/Documents/GitHub/outsourcing/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/HaL/Documents/GitHub/outsourcing\",\"filename\":\"/Users/HaL/Documents/GitHub/outsourcing/gulpfile.babel.js\",\"targets\":{\"android\":\"95.0.0\",\"chrome\":\"95.0.0\",\"edge\":\"95.0.0\",\"firefox\":\"94.0.0\",\"ie\":\"10.0.0\",\"ios\":\"15.0.0\",\"opera\":\"81.0.0\",\"safari\":\"15.1.0\",\"samsung\":\"14.0.0\"},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/HaL/Documents/GitHub/outsourcing\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.16.5": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/HaL/Documents/GitHub/outsourcing/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/HaL/Documents/GitHub/outsourcing",
      "filename": "/Users/HaL/Documents/GitHub/outsourcing/gulpfile.babel.js",
      "targets": {
        "android": "95.0.0",
        "chrome": "95.0.0",
        "edge": "95.0.0",
        "firefox": "94.0.0",
        "ie": "10.0.0",
        "ios": "15.0.0",
        "opera": "81.0.0",
        "safari": "15.1.0",
        "samsung": "14.0.0"
      },
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "/Users/HaL/Documents/GitHub/outsourcing",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/HaL/Documents/GitHub/outsourcing/gulpfile.babel.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/Users/HaL/Documents/GitHub/outsourcing/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/HaL/Documents/GitHub/outsourcing/",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "const gulp = require('gulp');\n\nconst $ = require('gulp-load-plugins')();\n\nconst Path = require('path');\n\nlet generateSourceMaps = process.env.NODE_ENV !== 'production';\n\nif (process.env.SOURCEMAPS === 'true' || process.env.SOURCEMAPS === '1') {\n  generateSourceMaps = true;\n} // scss 사용 할 때\n\n\nconst taskSass = function () {\n  return gulp.src(['./**/assets/src/scss/**/*.scss']).pipe($.if(generateSourceMaps, $.sourcemaps.init())).pipe($.plumber()).pipe($.sass({\n    // includePaths: sassPaths,\n    outputStyle: generateSourceMaps ? 'expanded' : 'compressed'\n  }).on('error', $.sass.logError)).pipe($.autoprefixer()).pipe($.rename(function (filepath) {\n    filepath.dirname = Path.join(filepath.dirname, '../../css');\n  })).pipe($.if(generateSourceMaps, $.sourcemaps.write('.'))).pipe(gulp.dest('.'));\n};\n\ntaskSass.displayName = 'sass'; // const taskPosthtml = function () {\n//   const options = {\n//     root: '../markup/src'\n//   }\n//\n//   const plugins = [\n//     require('posthtml-extend')(options),\n//     require('posthtml-include')(options)\n//   ]\n//\n//   return gulp.src(['../markup/src/**/*.html', '!**/_*.html'])\n//     .pipe($.posthtml(plugins))\n//     .pipe(gulp.dest('../markup'))\n// }\n// taskPosthtml.displayName = 'posthtml'\n\nconst taskWatch = function () {\n  gulp.watch(['./**/assets/src/scss/**/**/*.scss'], gulp.series(taskSass)); // gulp.watch(['./**/assets/src/scss/**/*.scss'], gulp.series(themeTaskSass))\n  // gulp.watch(['Components/Themes/assets/src/js/*.js'], gulp.series(taskScript))\n  // gulp.watch(['../markup/src/**/*.html'], gulp.series(taskPosthtml))\n}; // gulp.task('default', gulp.series(taskSass, taskScript)) => taskScript 사용 안해서 제외\n\n\ngulp.task('default', gulp.series(taskSass));\ngulp.task('build', gulp.series(taskSass));\ngulp.task('watch', taskWatch); // gulp.task(taskScript)\n\ngulp.task(taskSass); // gulp.task(taskPosthtml)\n// gulp.task('lint', gulp.series(taskLintStyle))\n// gulp.task(taskLintStyle)\n// gulp.task(taskFixStyle)\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1bHBmaWxlLmJhYmVsLmpzIl0sIm5hbWVzIjpbImd1bHAiLCJyZXF1aXJlIiwiJCIsIlBhdGgiLCJnZW5lcmF0ZVNvdXJjZU1hcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJTT1VSQ0VNQVBTIiwidGFza1Nhc3MiLCJzcmMiLCJwaXBlIiwiaWYiLCJzb3VyY2VtYXBzIiwiaW5pdCIsInBsdW1iZXIiLCJzYXNzIiwib3V0cHV0U3R5bGUiLCJvbiIsImxvZ0Vycm9yIiwiYXV0b3ByZWZpeGVyIiwicmVuYW1lIiwiZmlsZXBhdGgiLCJkaXJuYW1lIiwiam9pbiIsIndyaXRlIiwiZGVzdCIsImRpc3BsYXlOYW1lIiwidGFza1dhdGNoIiwid2F0Y2giLCJzZXJpZXMiLCJ0YXNrIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLENBQUMsR0FBR0QsT0FBTyxDQUFDLG1CQUFELENBQVAsRUFBVjs7QUFDQSxNQUFNRSxJQUFJLEdBQUdGLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQUlHLGtCQUFrQixHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUFsRDs7QUFFQSxJQUFJRixPQUFPLENBQUNDLEdBQVIsQ0FBWUUsVUFBWixLQUEyQixNQUEzQixJQUFxQ0gsT0FBTyxDQUFDQyxHQUFSLENBQVlFLFVBQVosS0FBMkIsR0FBcEUsRUFBeUU7QUFDdkVKLEVBQUFBLGtCQUFrQixHQUFHLElBQXJCO0FBQ0QsQyxDQUVEOzs7QUFDQSxNQUFNSyxRQUFRLEdBQUcsWUFBWTtBQUMzQixTQUFPVCxJQUFJLENBQUNVLEdBQUwsQ0FBUyxDQUFDLGdDQUFELENBQVQsRUFDSkMsSUFESSxDQUNDVCxDQUFDLENBQUNVLEVBQUYsQ0FBS1Isa0JBQUwsRUFBeUJGLENBQUMsQ0FBQ1csVUFBRixDQUFhQyxJQUFiLEVBQXpCLENBREQsRUFFSkgsSUFGSSxDQUVDVCxDQUFDLENBQUNhLE9BQUYsRUFGRCxFQUdKSixJQUhJLENBR0NULENBQUMsQ0FBQ2MsSUFBRixDQUFPO0FBQ1g7QUFDQUMsSUFBQUEsV0FBVyxFQUFHYixrQkFBRCxHQUF1QixVQUF2QixHQUFvQztBQUZ0QyxHQUFQLEVBR0hjLEVBSEcsQ0FHQSxPQUhBLEVBR1NoQixDQUFDLENBQUNjLElBQUYsQ0FBT0csUUFIaEIsQ0FIRCxFQU9KUixJQVBJLENBT0NULENBQUMsQ0FBQ2tCLFlBQUYsRUFQRCxFQVFKVCxJQVJJLENBUUNULENBQUMsQ0FBQ21CLE1BQUYsQ0FBUyxVQUFVQyxRQUFWLEVBQW9CO0FBQ2pDQSxJQUFBQSxRQUFRLENBQUNDLE9BQVQsR0FBbUJwQixJQUFJLENBQUNxQixJQUFMLENBQVVGLFFBQVEsQ0FBQ0MsT0FBbkIsRUFBNEIsV0FBNUIsQ0FBbkI7QUFDRCxHQUZLLENBUkQsRUFXSlosSUFYSSxDQVdDVCxDQUFDLENBQUNVLEVBQUYsQ0FBS1Isa0JBQUwsRUFBeUJGLENBQUMsQ0FBQ1csVUFBRixDQUFhWSxLQUFiLENBQW1CLEdBQW5CLENBQXpCLENBWEQsRUFZSmQsSUFaSSxDQVlDWCxJQUFJLENBQUMwQixJQUFMLENBQVUsR0FBVixDQVpELENBQVA7QUFhRCxDQWREOztBQWVBakIsUUFBUSxDQUFDa0IsV0FBVCxHQUF1QixNQUF2QixDLENBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1DLFNBQVMsR0FBRyxZQUFZO0FBQzVCNUIsRUFBQUEsSUFBSSxDQUFDNkIsS0FBTCxDQUFXLENBQUMsbUNBQUQsQ0FBWCxFQUFrRDdCLElBQUksQ0FBQzhCLE1BQUwsQ0FBWXJCLFFBQVosQ0FBbEQsRUFENEIsQ0FFNUI7QUFDQTtBQUNBO0FBQ0QsQ0FMRCxDLENBT0E7OztBQUNBVCxJQUFJLENBQUMrQixJQUFMLENBQVUsU0FBVixFQUFxQi9CLElBQUksQ0FBQzhCLE1BQUwsQ0FBWXJCLFFBQVosQ0FBckI7QUFDQVQsSUFBSSxDQUFDK0IsSUFBTCxDQUFVLE9BQVYsRUFBbUIvQixJQUFJLENBQUM4QixNQUFMLENBQVlyQixRQUFaLENBQW5CO0FBQ0FULElBQUksQ0FBQytCLElBQUwsQ0FBVSxPQUFWLEVBQW1CSCxTQUFuQixFLENBRUE7O0FBQ0E1QixJQUFJLENBQUMrQixJQUFMLENBQVV0QixRQUFWLEUsQ0FFQTtBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvSGFML0RvY3VtZW50cy9HaXRIdWIvb3V0c291cmNpbmcvIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ3VscCA9IHJlcXVpcmUoJ2d1bHAnKVxuY29uc3QgJCA9IHJlcXVpcmUoJ2d1bHAtbG9hZC1wbHVnaW5zJykoKVxuY29uc3QgUGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxubGV0IGdlbmVyYXRlU291cmNlTWFwcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcblxuaWYgKHByb2Nlc3MuZW52LlNPVVJDRU1BUFMgPT09ICd0cnVlJyB8fCBwcm9jZXNzLmVudi5TT1VSQ0VNQVBTID09PSAnMScpIHtcbiAgZ2VuZXJhdGVTb3VyY2VNYXBzID0gdHJ1ZVxufVxuXG4vLyBzY3NzIOyCrOyaqSDtlaAg65WMXG5jb25zdCB0YXNrU2FzcyA9IGZ1bmN0aW9uICgpIHsgXG4gIHJldHVybiBndWxwLnNyYyhbJy4vKiovYXNzZXRzL3NyYy9zY3NzLyoqLyouc2NzcyddKVxuICAgIC5waXBlKCQuaWYoZ2VuZXJhdGVTb3VyY2VNYXBzLCAkLnNvdXJjZW1hcHMuaW5pdCgpKSlcbiAgICAucGlwZSgkLnBsdW1iZXIoKSlcbiAgICAucGlwZSgkLnNhc3Moe1xuICAgICAgLy8gaW5jbHVkZVBhdGhzOiBzYXNzUGF0aHMsXG4gICAgICBvdXRwdXRTdHlsZTogKGdlbmVyYXRlU291cmNlTWFwcykgPyAnZXhwYW5kZWQnIDogJ2NvbXByZXNzZWQnXG4gICAgfSkub24oJ2Vycm9yJywgJC5zYXNzLmxvZ0Vycm9yKSlcbiAgICAucGlwZSgkLmF1dG9wcmVmaXhlcigpKVxuICAgIC5waXBlKCQucmVuYW1lKGZ1bmN0aW9uIChmaWxlcGF0aCkge1xuICAgICAgZmlsZXBhdGguZGlybmFtZSA9IFBhdGguam9pbihmaWxlcGF0aC5kaXJuYW1lLCAnLi4vLi4vY3NzJylcbiAgICB9KSlcbiAgICAucGlwZSgkLmlmKGdlbmVyYXRlU291cmNlTWFwcywgJC5zb3VyY2VtYXBzLndyaXRlKCcuJykpKVxuICAgIC5waXBlKGd1bHAuZGVzdCgnLicpKVxufVxudGFza1Nhc3MuZGlzcGxheU5hbWUgPSAnc2FzcydcblxuXG5cbi8vIGNvbnN0IHRhc2tQb3N0aHRtbCA9IGZ1bmN0aW9uICgpIHtcbi8vICAgY29uc3Qgb3B0aW9ucyA9IHtcbi8vICAgICByb290OiAnLi4vbWFya3VwL3NyYydcbi8vICAgfVxuLy9cbi8vICAgY29uc3QgcGx1Z2lucyA9IFtcbi8vICAgICByZXF1aXJlKCdwb3N0aHRtbC1leHRlbmQnKShvcHRpb25zKSxcbi8vICAgICByZXF1aXJlKCdwb3N0aHRtbC1pbmNsdWRlJykob3B0aW9ucylcbi8vICAgXVxuLy9cbi8vICAgcmV0dXJuIGd1bHAuc3JjKFsnLi4vbWFya3VwL3NyYy8qKi8qLmh0bWwnLCAnISoqL18qLmh0bWwnXSlcbi8vICAgICAucGlwZSgkLnBvc3RodG1sKHBsdWdpbnMpKVxuLy8gICAgIC5waXBlKGd1bHAuZGVzdCgnLi4vbWFya3VwJykpXG4vLyB9XG4vLyB0YXNrUG9zdGh0bWwuZGlzcGxheU5hbWUgPSAncG9zdGh0bWwnXG5cbmNvbnN0IHRhc2tXYXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgZ3VscC53YXRjaChbJy4vKiovYXNzZXRzL3NyYy9zY3NzLyoqLyoqLyouc2NzcyddLCBndWxwLnNlcmllcyh0YXNrU2FzcykpXG4gIC8vIGd1bHAud2F0Y2goWycuLyoqL2Fzc2V0cy9zcmMvc2Nzcy8qKi8qLnNjc3MnXSwgZ3VscC5zZXJpZXModGhlbWVUYXNrU2FzcykpXG4gIC8vIGd1bHAud2F0Y2goWydDb21wb25lbnRzL1RoZW1lcy9hc3NldHMvc3JjL2pzLyouanMnXSwgZ3VscC5zZXJpZXModGFza1NjcmlwdCkpXG4gIC8vIGd1bHAud2F0Y2goWycuLi9tYXJrdXAvc3JjLyoqLyouaHRtbCddLCBndWxwLnNlcmllcyh0YXNrUG9zdGh0bWwpKVxufVxuXG4vLyBndWxwLnRhc2soJ2RlZmF1bHQnLCBndWxwLnNlcmllcyh0YXNrU2FzcywgdGFza1NjcmlwdCkpID0+IHRhc2tTY3JpcHQg7IKs7JqpIOyViO2VtOyEnCDsoJzsmbhcbmd1bHAudGFzaygnZGVmYXVsdCcsIGd1bHAuc2VyaWVzKHRhc2tTYXNzKSlcbmd1bHAudGFzaygnYnVpbGQnLCBndWxwLnNlcmllcyh0YXNrU2FzcykpXG5ndWxwLnRhc2soJ3dhdGNoJywgdGFza1dhdGNoKVxuXG4vLyBndWxwLnRhc2sodGFza1NjcmlwdClcbmd1bHAudGFzayh0YXNrU2FzcylcbiBcbi8vIGd1bHAudGFzayh0YXNrUG9zdGh0bWwpXG5cbi8vIGd1bHAudGFzaygnbGludCcsIGd1bHAuc2VyaWVzKHRhc2tMaW50U3R5bGUpKVxuLy8gZ3VscC50YXNrKHRhc2tMaW50U3R5bGUpXG4vLyBndWxwLnRhc2sodGFza0ZpeFN0eWxlKVxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "gulp",
        "require",
        "$",
        "Path",
        "generateSourceMaps",
        "process",
        "env",
        "NODE_ENV",
        "SOURCEMAPS",
        "taskSass",
        "src",
        "pipe",
        "if",
        "sourcemaps",
        "init",
        "plumber",
        "sass",
        "outputStyle",
        "on",
        "logError",
        "autoprefixer",
        "rename",
        "filepath",
        "dirname",
        "join",
        "write",
        "dest",
        "displayName",
        "taskWatch",
        "watch",
        "series",
        "task"
      ],
      "mappings": "AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,CAAC,GAAGD,OAAO,CAAC,mBAAD,CAAP,EAAV;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAIG,kBAAkB,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAlD;;AAEA,IAAIF,OAAO,CAACC,GAAR,CAAYE,UAAZ,KAA2B,MAA3B,IAAqCH,OAAO,CAACC,GAAR,CAAYE,UAAZ,KAA2B,GAApE,EAAyE;AACvEJ,EAAAA,kBAAkB,GAAG,IAArB;AACD,C,CAED;;;AACA,MAAMK,QAAQ,GAAG,YAAY;AAC3B,SAAOT,IAAI,CAACU,GAAL,CAAS,CAAC,gCAAD,CAAT,EACJC,IADI,CACCT,CAAC,CAACU,EAAF,CAAKR,kBAAL,EAAyBF,CAAC,CAACW,UAAF,CAAaC,IAAb,EAAzB,CADD,EAEJH,IAFI,CAECT,CAAC,CAACa,OAAF,EAFD,EAGJJ,IAHI,CAGCT,CAAC,CAACc,IAAF,CAAO;AACX;AACAC,IAAAA,WAAW,EAAGb,kBAAD,GAAuB,UAAvB,GAAoC;AAFtC,GAAP,EAGHc,EAHG,CAGA,OAHA,EAGShB,CAAC,CAACc,IAAF,CAAOG,QAHhB,CAHD,EAOJR,IAPI,CAOCT,CAAC,CAACkB,YAAF,EAPD,EAQJT,IARI,CAQCT,CAAC,CAACmB,MAAF,CAAS,UAAUC,QAAV,EAAoB;AACjCA,IAAAA,QAAQ,CAACC,OAAT,GAAmBpB,IAAI,CAACqB,IAAL,CAAUF,QAAQ,CAACC,OAAnB,EAA4B,WAA5B,CAAnB;AACD,GAFK,CARD,EAWJZ,IAXI,CAWCT,CAAC,CAACU,EAAF,CAAKR,kBAAL,EAAyBF,CAAC,CAACW,UAAF,CAAaY,KAAb,CAAmB,GAAnB,CAAzB,CAXD,EAYJd,IAZI,CAYCX,IAAI,CAAC0B,IAAL,CAAU,GAAV,CAZD,CAAP;AAaD,CAdD;;AAeAjB,QAAQ,CAACkB,WAAT,GAAuB,MAAvB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,YAAY;AAC5B5B,EAAAA,IAAI,CAAC6B,KAAL,CAAW,CAAC,mCAAD,CAAX,EAAkD7B,IAAI,CAAC8B,MAAL,CAAYrB,QAAZ,CAAlD,EAD4B,CAE5B;AACA;AACA;AACD,CALD,C,CAOA;;;AACAT,IAAI,CAAC+B,IAAL,CAAU,SAAV,EAAqB/B,IAAI,CAAC8B,MAAL,CAAYrB,QAAZ,CAArB;AACAT,IAAI,CAAC+B,IAAL,CAAU,OAAV,EAAmB/B,IAAI,CAAC8B,MAAL,CAAYrB,QAAZ,CAAnB;AACAT,IAAI,CAAC+B,IAAL,CAAU,OAAV,EAAmBH,SAAnB,E,CAEA;;AACA5B,IAAI,CAAC+B,IAAL,CAAUtB,QAAV,E,CAEA;AAEA;AACA;AACA",
      "sourceRoot": "/Users/HaL/Documents/GitHub/outsourcing/",
      "sourcesContent": [
        "const gulp = require('gulp')\nconst $ = require('gulp-load-plugins')()\nconst Path = require('path')\nlet generateSourceMaps = process.env.NODE_ENV !== 'production'\n\nif (process.env.SOURCEMAPS === 'true' || process.env.SOURCEMAPS === '1') {\n  generateSourceMaps = true\n}\n\n// scss 사용 할 때\nconst taskSass = function () { \n  return gulp.src(['./**/assets/src/scss/**/*.scss'])\n    .pipe($.if(generateSourceMaps, $.sourcemaps.init()))\n    .pipe($.plumber())\n    .pipe($.sass({\n      // includePaths: sassPaths,\n      outputStyle: (generateSourceMaps) ? 'expanded' : 'compressed'\n    }).on('error', $.sass.logError))\n    .pipe($.autoprefixer())\n    .pipe($.rename(function (filepath) {\n      filepath.dirname = Path.join(filepath.dirname, '../../css')\n    }))\n    .pipe($.if(generateSourceMaps, $.sourcemaps.write('.')))\n    .pipe(gulp.dest('.'))\n}\ntaskSass.displayName = 'sass'\n\n\n\n// const taskPosthtml = function () {\n//   const options = {\n//     root: '../markup/src'\n//   }\n//\n//   const plugins = [\n//     require('posthtml-extend')(options),\n//     require('posthtml-include')(options)\n//   ]\n//\n//   return gulp.src(['../markup/src/**/*.html', '!**/_*.html'])\n//     .pipe($.posthtml(plugins))\n//     .pipe(gulp.dest('../markup'))\n// }\n// taskPosthtml.displayName = 'posthtml'\n\nconst taskWatch = function () {\n  gulp.watch(['./**/assets/src/scss/**/**/*.scss'], gulp.series(taskSass))\n  // gulp.watch(['./**/assets/src/scss/**/*.scss'], gulp.series(themeTaskSass))\n  // gulp.watch(['Components/Themes/assets/src/js/*.js'], gulp.series(taskScript))\n  // gulp.watch(['../markup/src/**/*.html'], gulp.series(taskPosthtml))\n}\n\n// gulp.task('default', gulp.series(taskSass, taskScript)) => taskScript 사용 안해서 제외\ngulp.task('default', gulp.series(taskSass))\ngulp.task('build', gulp.series(taskSass))\ngulp.task('watch', taskWatch)\n\n// gulp.task(taskScript)\ngulp.task(taskSass)\n \n// gulp.task(taskPosthtml)\n\n// gulp.task('lint', gulp.series(taskLintStyle))\n// gulp.task(taskLintStyle)\n// gulp.task(taskFixStyle)\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1649750646697
  }
}